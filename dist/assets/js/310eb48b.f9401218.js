"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[4379],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=o,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(b,i(i({ref:t},u),{},{components:r})):n.createElement(b,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5170:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],c={sidebar_position:1},s="WASM",l={unversionedId:"overview/technology/advanced/wasm",id:"overview/technology/advanced/wasm",isDocsHomePage:!1,title:"WASM",description:"*WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine.",source:"@site/docs/overview/technology/advanced/wasm.md",sourceDirName:"overview/technology/advanced",slug:"/overview/technology/advanced/wasm",permalink:"/docs/overview/technology/advanced/wasm",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/overview/technology/advanced/wasm.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Module Specifications",permalink:"/docs/overview/technology/architecture/module-specs"},next:{title:"Gravity Bridge",permalink:"/docs/overview/technology/advanced/gravity-bridge"}},u=[],m={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wasm"},"WASM"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine.\nWasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications."))),(0,a.kt)("p",null,"WebAssembly encodes a low-level, assembly-like programming language. To ensure developer interoperability, Archway uses a custom WebAssembly distribution. "),(0,a.kt)("p",null,"For the current spec, see ",(0,a.kt)("a",{parentName:"p",href:"https://webassembly.github.io/spec/core/intro/overview.html"},"WebAssembly"),"."),(0,a.kt)("h1",{id:"cosmwasm"},"CosmWasm"),(0,a.kt)("p",null,"CosmWasm is built as a Cosmos SDK module to allow sovereign chains to run smart contracts. It leverages WASM to provide safe, easy-to-use binaries that can cross programming language barriers."),(0,a.kt)("p",null,"For more information, see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cosmwasm.com/docs/0.16/architecture/multichain"},"CosmWasm"),"."))}p.isMDXComponent=!0}}]);